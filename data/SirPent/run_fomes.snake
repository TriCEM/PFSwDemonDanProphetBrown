#!/usr/bin/env python3

"""
Simple snakemake script for iterating over map file to run the `fomes` SIR
stochatstic, dynamic network simulator
"""

from __future__ import print_function

import os
import sys
import yaml
import re
import pandas as pd

## read project-specific configuration options and functions
ROOT = config["root"]
OUTROOT = config["outdir"]

def read_manifest(file_path):
    # read manifest and extract out relevant params
    df = pd.read_csv(file_path, sep='\t')
    simparams = df.to_dict()
    return simparams

## read simulation manifest as dictionary which we can iterate through
sim_map = read_manifest(config["simmap"])
# Manually transform dictionary to map "outpath" values to our wanted parameter values
sim_dict = {sim_map['outpath'][i]:
    {'SIRP': sim_map['SIRParampath'][i],
    'network_manip': sim_map['network_manip'][i],
    'param': sim_map['param'][i],
    'val': sim_map['val'][i],
    'path': sim_map['path'][i]}
for i in range(len(sim_map['outpath']))}


# rules
rule all:
    input: expand("{outpath}", outpath = list(sim_map["outpath"].values()))

rule run_simulation:
    output: "{outpath}"
    log: OUTROOT + "logs/{outpath}.log"
    params:
        rexec = ROOT + "R/fomes_wrappers_search_exec.R",
        mod = lambda wildcards: sim_dict[wildcards.outpath]['network_manip'],
        SIRP = lambda wildcards: sim_dict[wildcards.outpath]['SIRP'],
        path = lambda wildcards: sim_dict[wildcards.outpath]['path'],
        val = lambda wildcards: sim_dict[wildcards.outpath]['val'],
        reps = 100,
        outdir = OUTROOT,
        Rdir = ROOT,
        maxIter = 50,
        Iters = 25,
        AddOnIters = 5,
        coolingB = 0.001,
        Temperature = 1.0,
    shell:
        r"""
        Rscript {params.rexec} \
        --mod {params.mod} \
        --SIRParams {params.SIRP} \
        --netpath {params.path} \
        --val {params.val} \
        --reps {params.reps} \
        --output {output} \
        --outdir {params.outdir} \
        --Rdir {params.Rdir} \
        --maxIter {params.maxIter} \
        --Iters {params.Iters} \
        --AddOnIters {params.AddOnIters} \
        --coolingB {params.coolingB} \
        --Temperature {params.Temperature} \
        2> {log}
        """
